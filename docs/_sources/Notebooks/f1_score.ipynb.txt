{
 "cells": [
  {
   "cell_type": "markdown",
   "id": "8bdd87ab-86c8-4898-9240-202c1bb51913",
   "metadata": {},
   "source": [
    "# F1 Score\n",
    "\n",
    "F1 score is a method for quantifying the performance of a model. It is typically used for binarcy classification but F1 score can be extended to multiclass problems as well."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "id": "ab9e3e9d-da38-46a2-8856-a92bdf0d7324",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Requirement already satisfied: numpy in /home/alex/documents/notes/.venv/lib/python3.10/site-packages (1.26.4)\n",
      "Requirement already satisfied: scikit-learn in /home/alex/documents/notes/.venv/lib/python3.10/site-packages (1.5.0)\n",
      "Requirement already satisfied: matplotlib in /home/alex/documents/notes/.venv/lib/python3.10/site-packages (3.8.3)\n",
      "Requirement already satisfied: scipy>=1.6.0 in /home/alex/documents/notes/.venv/lib/python3.10/site-packages (from scikit-learn) (1.13.1)\n",
      "Requirement already satisfied: threadpoolctl>=3.1.0 in /home/alex/documents/notes/.venv/lib/python3.10/site-packages (from scikit-learn) (3.5.0)\n",
      "Requirement already satisfied: joblib>=1.2.0 in /home/alex/documents/notes/.venv/lib/python3.10/site-packages (from scikit-learn) (1.4.2)\n",
      "Requirement already satisfied: fonttools>=4.22.0 in /home/alex/documents/notes/.venv/lib/python3.10/site-packages (from matplotlib) (4.49.0)\n",
      "Requirement already satisfied: cycler>=0.10 in /home/alex/documents/notes/.venv/lib/python3.10/site-packages (from matplotlib) (0.12.1)\n",
      "Requirement already satisfied: python-dateutil>=2.7 in /home/alex/documents/notes/.venv/lib/python3.10/site-packages (from matplotlib) (2.9.0.post0)\n",
      "Requirement already satisfied: contourpy>=1.0.1 in /home/alex/documents/notes/.venv/lib/python3.10/site-packages (from matplotlib) (1.2.0)\n",
      "Requirement already satisfied: kiwisolver>=1.3.1 in /home/alex/documents/notes/.venv/lib/python3.10/site-packages (from matplotlib) (1.4.5)\n",
      "Requirement already satisfied: packaging>=20.0 in /home/alex/documents/notes/.venv/lib/python3.10/site-packages (from matplotlib) (24.0)\n",
      "Requirement already satisfied: pyparsing>=2.3.1 in /home/alex/documents/notes/.venv/lib/python3.10/site-packages (from matplotlib) (3.1.2)\n",
      "Requirement already satisfied: pillow>=8 in /home/alex/documents/notes/.venv/lib/python3.10/site-packages (from matplotlib) (10.2.0)\n",
      "Requirement already satisfied: six>=1.5 in /home/alex/documents/notes/.venv/lib/python3.10/site-packages (from python-dateutil>=2.7->matplotlib) (1.16.0)\n",
      "Note: you may need to restart the kernel to use updated packages.\n"
     ]
    }
   ],
   "source": [
    "%pip install numpy scikit-learn matplotlib"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 34,
   "id": "b7811b8e-adcd-47e5-9c10-0b8ba8f622b6",
   "metadata": {},
   "outputs": [],
   "source": [
    "import numpy as np\n",
    "import matplotlib.pyplot as plt\n",
    "\n",
    "from sklearn import linear_model"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "3f48021b-2996-4622-bf14-d1f73cb7377a",
   "metadata": {},
   "source": [
    "Let us create a toy dataset classifying two gaussian distributions."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 31,
   "id": "324820ef-bad7-477d-bb1d-833a38834ed3",
   "metadata": {},
   "outputs": [],
   "source": [
    "n = 50\n",
    "x = np.concatenate([\n",
    "    np.random.normal([1, 0], 1, size=(n, 2)),\n",
    "    np.random.normal([-1, 0], 1, size=(n, 2))\n",
    "])\n",
    "y = np.asarray([0] * n + [1] * n)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "8d40b144-4bc4-42db-b567-60cf13152c06",
   "metadata": {},
   "source": [
    "Plot `x` and `y`."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 32,
   "id": "3a23d4e6-70a5-4569-951b-bb84941c4bf0",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "<matplotlib.legend.Legend at 0x7f8815f77790>"
      ]
     },
     "execution_count": 32,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "image/png": "",
      "text/plain": [
       "<Figure size 640x480 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "plt.scatter(x[:n, 0], x[:n, 1], color=\"tab:orange\", label=0)\n",
    "plt.scatter(x[n:, 0], x[n:, 1], color=\"tab:blue\", label=1)\n",
    "plt.legend()"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "0638298d-9b2a-4905-a8d3-1fbd05ce8e4b",
   "metadata": {},
   "source": [
    "Let us train a logistic regression model on this data."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 36,
   "id": "c5bcf519-6be2-4b61-ba3e-39994e111f45",
   "metadata": {},
   "outputs": [],
   "source": [
    "model = linear_model.LogisticRegression()\n",
    "model.fit(x, y)\n",
    "y_hat = model.predict(x)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "807f20ca-3ae9-4062-a88d-c847c3832882",
   "metadata": {},
   "source": [
    "Plot the predictions and the true labels."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 46,
   "id": "a4766fb2-eb7f-4199-baa2-4342f311f5cb",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "Text(0.5, 1.0, 'Predictions')"
      ]
     },
     "execution_count": 46,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "image/png": "",
      "text/plain": [
       "<Figure size 1000x400 with 2 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "fig, ax = plt.subplots(1, 2, figsize=(10, 4))\n",
    "\n",
    "ax[0].scatter(x[n:, 0], x[n:, 1], label=0)\n",
    "ax[0].scatter(x[:n, 0], x[:n, 1], label=1)\n",
    "ax[0].legend()\n",
    "ax[0].set_title(\"Ground Truth\")\n",
    "\n",
    "ax[1].scatter(x[y_hat == 0, 0], x[y_hat == 0, 1], label=0)\n",
    "ax[1].scatter(x[y_hat == 1, 0], x[y_hat == 1, 1], label=1)\n",
    "ax[1].legend()\n",
    "ax[1].set_title(\"Predictions\")"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "445ff497-3bbc-49f3-b898-08387611058c",
   "metadata": {},
   "source": [
    "The model clearly gets several predictions wrong. We can break our predictions, `y_hat`, down into for categories:\n",
    "\n",
    "1. `y_hat` is 1 and `y_hat` is 1 (true positive).\n",
    "2. `y_hat` is 1 and `y_hat` is 0 (false negative).\n",
    "3. `y_hat` is 0 and `y_hat` is 1 (false positive).\n",
    "4. `y_hat` is 0 and `y_hat` is 0 (true negative).\n",
    "\n",
    "Let us calculate these quantitites for our model."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 54,
   "id": "e6cff610-3552-4d66-b382-2e5371fc0197",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "true_pos: 44,  true_neg: 40,  false_pos: 10,  false_neg: 6\n"
     ]
    }
   ],
   "source": [
    "true_pos = np.sum((y == 1) & (y_hat == 1))\n",
    "true_neg = np.sum((y == 0) & (y_hat == 0))\n",
    "false_pos = np.sum((y == 0) & (y_hat == 1))\n",
    "false_neg = np.sum((y == 1) & (y_hat == 0))\n",
    "\n",
    "print(f\"true_pos: {true_pos},  true_neg: {true_neg},  false_pos: {false_pos},  false_neg: {false_neg}\")"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "935b49dc-e7eb-4fe7-955f-1d4b6515cf0c",
   "metadata": {},
   "source": [
    "Our model gives mostly true positives and true negatives which is good. When assessing the quality of the model, our appetite for false positives and false negatives may depend on our application. For example:\n",
    "\n",
    "* If 1 means a patients has a disease and 0 means they don't, we may be more willing to accept false positives than false negatives.\n",
    "\n",
    "# Precision and Recall\n",
    "\n",
    "Precisions and recall is a way of comparing the actual results with the predicted results.\n",
    "\n",
    "$$\n",
    "\\text{precision} = \\frac{\\text{true positive}}{\\text{true positive} + \\text{false positive}}, \\quad\n",
    "\\text{recall} = \\frac{\\text{true positive}}{\\text{true positive} + \\text{false negative}}\n",
    "$$\n",
    "\n",
    "* Precision is the proportion of positive predictions that were actually positive.\n",
    "* Recall is the proportion of actual positives that were predicted to be positive.\n",
    "\n",
    "Let us write functions to calculate precision and recall."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 59,
   "id": "1c1113ec-3e82-4a05-b3c8-9d4c0bf34018",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Precision: 0.8148148148148148,  Recall: 0.88\n"
     ]
    }
   ],
   "source": [
    "def calculate_precision(y, y_hat):\n",
    "    true_pos = np.sum((y == 1) & (y_hat == 1))\n",
    "    false_pos = np.sum((y == 0) & (y_hat == 1))\n",
    "    return true_pos / (true_pos + false_pos)\n",
    "\n",
    "def calculate_recall(y, y_hat):\n",
    "    true_pos = np.sum((y == 1) & (y_hat == 1))\n",
    "    false_neg = np.sum((y == 1) & (y_hat == 0))\n",
    "    return true_pos / (true_pos + false_neg)\n",
    "\n",
    "precision = calculate_precision(y, y_hat)\n",
    "recall = calculate_recall(y, y_hat)\n",
    "\n",
    "print(f\"Precision: {precision},  Recall: {recall}\")"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "51eb22bf-9b17-499e-8bff-e458a663e7e8",
   "metadata": {},
   "source": [
    "Precisions would be 1 if we had 0 false positives. Recall would be 1 if we had 0 false negatives.\n",
    "\n",
    "# F1 Score\n",
    "\n",
    "F1 score is the harmonic mean of precision and recall. Let us first recall the definition of harmonic mean. Suppose we have a sequence of numbers $x_1, x_2, \\dots, x_n$. The harmonic mean of this set of numbers is,\n",
    "\n",
    "$$\n",
    "\\frac{n}{x_1^{-1} + x_2^{-1} + \\dots + x_n^{-1}}\n",
    "$$\n",
    "\n",
    "So, the harmonic mean of precision and recall (F1 score) is,\n",
    "\n",
    "$$\n",
    "F1 = \\frac{2}{\\text{precision}^{-1} + \\text{recall}^{-1}} = 2 \\frac{\\text{precision} \\cdot \\text{recall}}{\\text{precision} + \\text{recall}} = \\frac{\\text{2 tp}}{\\text{2 tp} + fp + fn}\n",
    "$$\n",
    "\n",
    "Let us write a function for calculate the F1 score."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 62,
   "id": "8fe37161-50aa-4746-98b0-db1f6aa94d3b",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "F1 score: 0.8461538461538461\n"
     ]
    }
   ],
   "source": [
    "def calculate_f1(y, y_hat):\n",
    "    recall = calculate_recall(y, y_hat)\n",
    "    precision = calculate_precision(y, y_hat)\n",
    "    return 2 * (precision * recall) / (precision + recall)\n",
    "\n",
    "f1_score = calculate_f1(y, y_hat)\n",
    "print(f\"F1 score: {f1_score}\")"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "3258961d-d3cf-4298-a5f4-167dc8559be1",
   "metadata": {},
   "source": [
    "Why is the harmonic mean used when calculating f1 score as opposed to the arithmetic mean?"
   ]
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3 (ipykernel)",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.10.12"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}
